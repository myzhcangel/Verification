#define NUM_OF_PROCESSES 2

bool choosing[NUM_OF_PROCESSES];
int number[NUM_OF_PROCESSES];
int count = 0;

bool deadlock_wantCS[NUM_OF_PROCESSES];

int starvation_turn = 0;

inline bakery_lock() {
	int id = _pid - 1;
	choosing[id] = 1;
	int i = 0;
	do
	:: i < NUM_OF_PROCESSES ->
		if
		:: number[i] > number[id] -> number[id] = number[i];
		:: else -> skip
		fi
		i++
	:: else -> break
	od
	number[id]++;
	choosing[id] = 0;

	i = 0;
	do
	:: i < NUM_OF_PROCESSES ->
		(choosing[i] == 0)
		!((number[i] != 0) && (number[i] < number[id] || (number[i] == number[id] && i < id)))
		i++
	:: else -> break
	od
}

inline bakery_unlock() {
	number[_pid - 1] = 0;
}

inline deadlock_lock() {
	deadlock_wantCS[_pid - 1] = 1;
	(deadlock_wantCS[1 - _pid + 1] == 0);
}

inline deadlock_unlock() {
	deadlock_wantCS[_pid - 1] = 0;
}

inline starvation_lock() {
	(starvation_turn == _pid - 1);
}

inline starvation_unlock() {
	starvation_turn = 1 - _pid + 1;
}
